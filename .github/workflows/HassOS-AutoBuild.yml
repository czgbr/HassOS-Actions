name: HassOS-AutoBuild

on:
#  release:
#    types: [published]
  #push:
  #  branches:
  #    - main
  #  paths:
  #    - 'start'
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  #schedule:
  #  - cron: 0 18 * * *
  #watch:
  #  types: [started]

env:
  RUN_VALIDATION: true

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [generic_x86_64]

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Initialization environment
      run: |
        #sudo echo "nameserver 1.1.1.1" >> /etc/hosts
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/share/

    - name: Clone source code  
      run: |
        df -hT $PWD
        #dpkg-query -W --showformat='${Installed-Size} ${Package} ${Status}\n'|grep -v deinstall|sort -n|awk '{print $1" "$2}'
        #git clone https://github.com/home-assistant/operating-system.git -b master HassOS
        git clone https://github.com/home-assistant/operating-system.git -b dev HassOS
    
    - name: Change Settings.
      run: |
        cd HassOS
        git submodule update --init
        sed -i 's/-e\ BUILDER_UID/-e TZ=Asia\/Shanghai\ -e BUILDER_UID/g' buildroot-external/package/hassio/hassio.mk 
        sed -i 's/-e\ BUILDER_UID/-e TZ=Asia\/Shanghai\ -e BUILDER_UID/g' scripts/enter.sh
        sed -i 's/-e\ SUPERVISOR_NAME=hassio_supervisor/-e TZ=Asia\/Shanghai\ -e SUPERVISOR_NAME=hassio_supervisor/g' buildroot-external/rootfs-overlay/usr/sbin/hassos-supervisor
       
        sed -i 's/squashfs/ext2/g' buildroot-external/scripts/ota.sh
        sed -i 's/squashfs/ext2/g' buildroot-external/scripts/name.sh
        sed -i '/# System 1/,+1d' buildroot-external/scripts/hdd-image.sh
        sed -i 's/SYSTEM_SIZE=256M/SYSTEM_SIZE=4096M/g' buildroot-external/scripts/hdd-image.sh
        sed -i 's/SQUASHFS/EXT2/g' buildroot/board/pc/linux.config
        sed -i 's/SQUASHFS/EXT2/g' buildroot-external/bootloader/uboot.config
        sed -i 's/rootwait/rw rootwait/g' buildroot-external/board/pc/grub.cfg
        sed -i 's/BR2_TARGET_ROOTFS_SQUASHFS/BR2_TARGET_ROOTFS_EXT2/g' buildroot-external/configs/${{matrix.target}}_defconfig
        sed -i 's/BR2_TARGET_ROOTFS_SQUASHFS4_LZ4=y/BR2_TARGET_ROOTFS_EXT2_SIZE=\"4096M\"/g' buildroot-external/configs/${{matrix.target}}_defconfig
        
        echo "CONFIG_EXT2_FS_XATTR=y
        CONFIG_EXT2_FS_SECURITY=y
        CONFIG_EXT2_FS=y" >> buildroot-external/kernel/hassos.config

        echo "BR2_TARGET_GENERIC_ROOT_PASSWD=\"zhirui02\"
        BR2_ROOTFS_SKELETON_DEFAULT=y
        BR2_TARGET_ENABLE_ROOT_LOGIN=y
        BR2_HOST_LZO=n
        BR2_PACKAGE_VIM=y
        BR2_PACKAGE_NANO_TINY=y
        BR2_PACKAGE_NTP=y
        BR2_PACKAGE_NTP_SNTP=y
        BR2_PACKAGE_NTPDATE=y
        BR2_PACKAGE_NTPTIME=y
        BR2_PACKAGE_TZDATA=y
        BR2_PACKAGE_HTOP=y
        BR2_PACKAGE_WGET=y
        #BR2_PACKAGE_OPKG=y
        #BR2_PACKAGE_OPKG_GPG_SIGN=y
        BR2_TARGET_INFO=y
        #BR2_PACKAGE_HOST_E2FSPROGS=y
        BR2_PACKAGE_HOST_ZIP=y
        BR2_TARGET_GENERIC_REMOUNT_ROOTFS_RW=y
        BR2_TARGET_ZONELIST=\"default\"
        BR2_TARGET_LOCALTIME=\"Asia/Shanghai\"
        
        BR2_PACKAGE_VSFTPD=y
		    BR2_PACKAGE_OPENSSL=y
        BR2_PACKAGE_LIBOPENSSL=y
        BR2_PACKAGE_OPENSSH=y
        BR2_PACKAGE_OPENSSH_CLIENT=no
        BR2_PACKAGE_OPENSSH_SERVER=y
        BR2_PACKAGE_OPENSSH_SANDBOX=no
        BR2_PACKAGE_OPENSSH_KEY_UTILS=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        cat buildroot-external/configs/${{matrix.target}}_defconfig
            
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
    - name: Build
      shell: 'script -q -e -c "bash {0}"'
      id: build
      run: |
        sleep $((RANDOM % 60))    
        cd HassOS
        ./scripts/enter.sh make -j$(($(nproc) + 1)) ${{matrix.target}}
        #sudo ./scripts/entry.sh make ${{matrix.target}}

    - name: Upload Firmware
      uses: actions/upload-artifact@main
      with:
        name: ${{matrix.target}}_Firmware
        path: HassOS/release
    
    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
